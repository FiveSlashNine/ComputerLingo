[
  {
    "id": 1,
    "title": "Level 2: Data Structures - Trees",
    "type": "multiple-choice",
    "question": "What is the maximum number of children a binary tree node can have?",
    "options": [
      { "id": "a", "text": "1" },
      { "id": "b", "text": "2" },
      { "id": "c", "text": "3" },
      { "id": "d", "text": "Unlimited" }
    ],
    "correctAnswer": "b",
    "icon": "Code2"
  },
  {
    "id": 2,
    "title": "Level 2: Linked List",
    "type": "true-false",
    "question": "Doubly linked lists allow traversal in both forward and backward directions.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 3,
    "title": "Level 2: Fill the blank",
    "type": "fill-blanks",
    "question": "In a hash table, collisions occur when two keys hash to the same ____.",
    "codeTemplate": "Collisions occur when two keys hash to the same ____.",
    "blanks": ["index"],
    "icon": "Terminal"
  },
  {
    "id": 4,
    "title": "Level 2: Stack Implementation",
    "type": "drag-drop",
    "question": "Arrange the correct order for pushing an element onto a stack implemented with an array:",
    "items": [
      { "id": "1", "text": "Increment top pointer" },
      { "id": "2", "text": "Check if stack is full" },
      { "id": "3", "text": "Place element at top" },
      { "id": "4", "text": "Return success" }
    ],
    "correctOrder": ["2", "1", "3", "4"],
    "icon": "ListChecks"
  },
  {
    "id": 5,
    "title": "Level 2: Multiple Choice",
    "type": "multiple-choice",
    "question": "Which data structure provides average O(1) time complexity for search operations?",
    "options": [
      { "id": "a", "text": "Linked List" },
      { "id": "b", "text": "Hash Table" },
      { "id": "c", "text": "Binary Search Tree" },
      { "id": "d", "text": "Array" }
    ],
    "correctAnswer": "b",
    "icon": "Code2"
  },
  {
    "id": 6,
    "title": "Level 2: True or False",
    "type": "true-false",
    "question": "In a binary search tree, the left child node always contains a value less than the parent node.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 7,
    "title": "Level 2: Fill the blank",
    "type": "fill-blanks",
    "question": "In a graph, an edge connecting a node to itself is called a ____ edge.",
    "codeTemplate": "An edge connecting a node to itself is called a ____ edge.",
    "blanks": ["self-loop"],
    "icon": "Terminal"
  },
  {
    "id": 8,
    "title": "Level 2: Queue Types",
    "type": "drag-drop",
    "question": "Arrange these queue types from simplest to most complex:",
    "items": [
      { "id": "1", "text": "Priority Queue" },
      { "id": "2", "text": "Circular Queue" },
      { "id": "3", "text": "Simple Queue" },
      { "id": "4", "text": "Double-Ended Queue (Deque)" }
    ],
    "correctOrder": ["3", "2", "4", "1"],
    "icon": "ListChecks"
  },
  {
    "id": 9,
    "title": "Level 2: Multiple Choice",
    "type": "multiple-choice",
    "question": "Which traversal method visits nodes in the order: left subtree, root, right subtree?",
    "options": [
      { "id": "a", "text": "Pre-order" },
      { "id": "b", "text": "Post-order" },
      { "id": "c", "text": "In-order" },
      { "id": "d", "text": "Level-order" }
    ],
    "correctAnswer": "c",
    "icon": "Code2"
  },
  {
    "id": 10,
    "title": "Level 2: True or False",
    "type": "true-false",
    "question": "A balanced binary tree ensures that the height difference between left and right subtrees is at most 1.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 11,
    "title": "Level 2: Fill the blank",
    "type": "fill-blanks",
    "question": "A ____ is a collection of nodes connected by edges, which may be directed or undirected.",
    "codeTemplate": "A ____ is a collection of nodes connected by edges.",
    "blanks": ["graph"],
    "icon": "Terminal"
  },
  {
    "id": 12,
    "title": "Level 2: Linked List Insertion",
    "type": "drag-drop",
    "question": "Arrange the steps to insert a node at the beginning of a singly linked list:",
    "items": [
      { "id": "1", "text": "Set new node's next to current head" },
      { "id": "2", "text": "Assign data to new node" },
      { "id": "3", "text": "Update head pointer to new node" },
      { "id": "4", "text": "Allocate new node" }
    ],
    "correctOrder": ["4", "2", "1", "3"],
    "icon": "ListChecks"
  },
  {
    "id": 13,
    "title": "Level 2: Multiple Choice",
    "type": "multiple-choice",
    "question": "Which data structure is the best choice to implement recursion internally?",
    "options": [
      { "id": "a", "text": "Queue" },
      { "id": "b", "text": "Stack" },
      { "id": "c", "text": "Linked List" },
      { "id": "d", "text": "Tree" }
    ],
    "correctAnswer": "b",
    "icon": "Code2"
  },
  {
    "id": 14,
    "title": "Level 2: True or False",
    "type": "true-false",
    "question": "In an adjacency matrix representation of a graph, the matrix size is V x V where V is the number of vertices.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 15,
    "title": "Level 2: Fill the blank",
    "type": "fill-blanks",
    "question": "In a heap data structure, the parent node is always ____ than its children in a max-heap.",
    "codeTemplate": "In a max-heap, the parent node is always ____ than its children.",
    "blanks": ["greater"],
    "icon": "Terminal"
  },
  {
    "id": 16,
    "title": "Level 2: Tree Rotations",
    "type": "drag-drop",
    "question": "Put the steps of a right rotation on a binary search tree node in order:",
    "items": [
      { "id": "1", "text": "Make left child's right subtree the left subtree of current node" },
      { "id": "2", "text": "Set left child as new root" },
      { "id": "3", "text": "Assign current node as right child of left child" },
      { "id": "4", "text": "Update pointers accordingly" }
    ],
    "correctOrder": ["1", "3", "2", "4"],
    "icon": "ListChecks"
  },
  {
    "id": 17,
    "title": "Level 2: Multiple Choice",
    "type": "multiple-choice",
    "question": "Which data structure uses key-value pairs for storing data?",
    "options": [
      { "id": "a", "text": "Queue" },
      { "id": "b", "text": "Stack" },
      { "id": "c", "text": "Hash Map" },
      { "id": "d", "text": "Linked List" }
    ],
    "correctAnswer": "c",
    "icon": "Code2"
  },
  {
    "id": 18,
    "title": "Level 2: True or False",
    "type": "true-false",
    "question": "In a doubly linked list, each node contains two pointers.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 19,
    "title": "Level 2: Fill the blank",
    "type": "fill-blanks",
    "question": "In a circular linked list, the last node points to the ____ node.",
    "codeTemplate": "In a circular linked list, the last node points to the ____ node.",
    "blanks": ["head"],
    "icon": "Terminal"
  },
  {
    "id": 20,
    "title": "Level 2: Graph Traversal",
    "type": "drag-drop",
    "question": "Arrange the steps of breadth-first search (BFS) traversal:",
    "items": [
      { "id": "1", "text": "Visit the next node in the queue" },
      { "id": "2", "text": "Add unvisited adjacent nodes to the queue" },
      { "id": "3", "text": "Dequeue a node" },
      { "id": "4", "text": "Start at the source node" }
    ],
    "correctOrder": ["4", "3", "1", "2"],
    "icon": "ListChecks"
  }
]