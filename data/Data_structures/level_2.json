[
  {
    "id": "int-ds-dynarr-q1",
    "title": "Level 2: Dynamic Arrays & Amortized Resizing",
    "type": "multiple-choice",
    "question": "Why is append O(1) amortized?",
    "icon": "Infinity",
    "options": [
      {
        "id": "a",
        "text": "No resizes"
      },
      {
        "id": "b",
        "text": "Each resize O(1)"
      },
      {
        "id": "c",
        "text": "Rare resizes"
      },
      {
        "id": "d",
        "text": "Infinite memory"
      }
    ],
    "correctAnswer": "c"
  },
  {
    "id": "int-ds-dynarr-q2",
    "title": "Level 2: Dynamic Arrays & Amortized Resizing",
    "type": "true-false",
    "question": "Doubling capacity keeps total copy cost proportional to number of appends.",
    "icon": "Layers",
    "correctAnswer": true
  },
  {
    "id": "int-ds-dynarr-q3",
    "title": "Level 2: Dynamic Arrays & Amortized Resizing",
    "type": "fill-blanks",
    "question": "k-th resize copies roughly 2^k ____.",
    "icon": "Calculator",
    "codeTemplate": "k-th resize copies roughly 2^k ____.",
    "blanks": [
      ""
    ]
  },
  {
    "id": "int-ds-dynarr-q4",
    "title": "Level 2: Dynamic Arrays & Amortized Resizing",
    "type": "multiple-choice",
    "question": "After resizing, capacity is usually:",
    "icon": "Divide",
    "options": [
      {
        "id": "a",
        "text": "+1"
      },
      {
        "id": "b",
        "text": "*2"
      },
      {
        "id": "c",
        "text": "*n"
      },
      {
        "id": "d",
        "text": "/2"
      }
    ],
    "correctAnswer": "b"
  },
  {
    "id": "int-ds-dynarr-q5",
    "title": "Level 2: Dynamic Arrays & Amortized Resizing",
    "type": "true-false",
    "question": "Shrink-on-remove is often omitted to avoid thrashing.",
    "icon": "AlertCircle",
    "correctAnswer": true
  },
  {
    "id": "int-ds-dynarr-q6",
    "title": "Level 2: Dynamic Arrays & Amortized Resizing",
    "type": "drag-drop",
    "question": "Order append to full array:",
    "icon": "ArrowsRightLeft",
    "items": [
      {
        "id": "1",
        "text": "Check full"
      },
      {
        "id": "2",
        "text": "Allocate new"
      },
      {
        "id": "3",
        "text": "Copy"
      },
      {
        "id": "4",
        "text": "Insert"
      }
    ],
    "correctOrder": [
      "1",
      "2",
      "3",
      "4"
    ]
  },
  {
    "id": "int-ds-dll-q1",
    "title": "Level 2: Doubly Linked Lists",
    "type": "multiple-choice",
    "question": "Additional pointer compared to singly list?",
    "icon": "ArrowLeft",
    "options": [
      {
        "id": "a",
        "text": "child"
      },
      {
        "id": "b",
        "text": "prev"
      },
      {
        "id": "c",
        "text": "parent"
      },
      {
        "id": "d",
        "text": "random"
      }
    ],
    "correctAnswer": "b"
  },
  {
    "id": "int-ds-dll-q2",
    "title": "Level 2: Doubly Linked Lists",
    "type": "true-false",
    "question": "Removal of known node is O(1).",
    "icon": "Trash",
    "correctAnswer": true
  },
  {
    "id": "int-ds-dll-q3",
    "title": "Level 2: Doubly Linked Lists",
    "type": "fill-blanks",
    "question": "Traverse backwards using ____ pointer.",
    "icon": "ArrowDown",
    "codeTemplate": "Traverse backwards using ____ pointer.",
    "blanks": [
      ""
    ]
  },
  {
    "id": "int-ds-dll-q4",
    "title": "Level 2: Doubly Linked Lists",
    "type": "multiple-choice",
    "question": "Insert at tail without head pointer is:",
    "icon": "Clock",
    "options": [
      {
        "id": "a",
        "text": "O(1)"
      },
      {
        "id": "b",
        "text": "O(log n)"
      },
      {
        "id": "c",
        "text": "O(n)"
      },
      {
        "id": "d",
        "text": "O(n²)"
      }
    ],
    "correctAnswer": "c"
  },
  {
    "id": "int-ds-dll-q5",
    "title": "Level 2: Doubly Linked Lists",
    "type": "true-false",
    "question": "Doubly list uses more space per node.",
    "icon": "Layers",
    "correctAnswer": true
  },
  {
    "id": "int-ds-dll-q6",
    "title": "Level 2: Doubly Linked Lists",
    "type": "drag-drop",
    "question": "Match operations to complexity:",
    "icon": "SortNumeric",
    "items": [
      {
        "id": "A",
        "text": "Insert head"
      },
      {
        "id": "B",
        "text": "Delete tail"
      },
      {
        "id": "C",
        "text": "Search"
      }
    ],
    "correctOrder": [
      "A→O(1)",
      "B→O(1)",
      "C→O(n)"
    ]
  },
  {
    "id": "int-ds-bst-q1",
    "title": "Level 2: Binary Search Trees (BST)",
    "type": "multiple-choice",
    "question": "Average height of balanced BST?",
    "icon": "Tree",
    "options": [
      {
        "id": "a",
        "text": "O(1)"
      },
      {
        "id": "b",
        "text": "O(log n)"
      },
      {
        "id": "c",
        "text": "O(n)"
      },
      {
        "id": "d",
        "text": "O(n log n)"
      }
    ],
    "correctAnswer": "b"
  },
  {
    "id": "int-ds-bst-q2",
    "title": "Level 2: Binary Search Trees (BST)",
    "type": "true-false",
    "question": "Inserting sorted data yields O(n) height.",
    "icon": "AlertCircle",
    "correctAnswer": true
  },
  {
    "id": "int-ds-bst-q3",
    "title": "Level 2: Binary Search Trees (BST)",
    "type": "fill-blanks",
    "question": "Inorder traversal yields ____ order.",
    "icon": "SortAscending",
    "codeTemplate": "Inorder traversal yields ____ order.",
    "blanks": [
      ""
    ]
  },
  {
    "id": "int-ds-bst-q4",
    "title": "Level 2: Binary Search Trees (BST)",
    "type": "multiple-choice",
    "question": "Deleting node with two children uses:",
    "icon": "Layers",
    "options": [
      {
        "id": "a",
        "text": "Leftmost in right subtree"
      },
      {
        "id": "b",
        "text": "Rightmost in left"
      },
      {
        "id": "c",
        "text": "Random"
      },
      {
        "id": "d",
        "text": "None"
      }
    ],
    "correctAnswer": "a"
  },
  {
    "id": "int-ds-bst-q5",
    "title": "Level 2: Binary Search Trees (BST)",
    "type": "true-false",
    "question": "Search in BST is O(log n) average.",
    "icon": "Search",
    "correctAnswer": true
  },
  {
    "id": "int-ds-bst-q6",
    "title": "Level 2: Binary Search Trees (BST)",
    "type": "drag-drop",
    "question": "Match to average complexity:",
    "icon": "SortNumeric",
    "items": [
      {
        "id": "S",
        "text": "Search"
      },
      {
        "id": "I",
        "text": "Insert"
      },
      {
        "id": "D",
        "text": "Delete"
      }
    ],
    "correctOrder": [
      "S→O(log n)",
      "I→O(log n)",
      "D→O(log n)"
    ]
  },
  {
    "id": "int-ds-heap-q1",
    "title": "Level 2: Heaps (Binary Heaps)",
    "type": "multiple-choice",
    "question": "Parent of index i is at floor((i-1)/2). True or false?",
    "icon": "Math",
    "options": [
      {
        "id": "a",
        "text": "True"
      },
      {
        "id": "b",
        "text": "False"
      }
    ],
    "correctAnswer": "a"
  },
  {
    "id": "int-ds-heap-q2",
    "title": "Level 2: Heaps (Binary Heaps)",
    "type": "true-false",
    "question": "Insert in heap is O(log n).",
    "icon": "Plus",
    "correctAnswer": true
  },
  {
    "id": "int-ds-heap-q3",
    "title": "Level 2: Heaps (Binary Heaps)",
    "type": "fill-blanks",
    "question": "Children of i are at 2i+1 and ____.",
    "icon": "Layers",
    "codeTemplate": "Children of i are at 2i+1 and ____.",
    "blanks": [
      ""
    ]
  },
  {
    "id": "int-ds-heap-q4",
    "title": "Level 2: Heaps (Binary Heaps)",
    "type": "multiple-choice",
    "question": "Extract-min replaces root with last then ____.",
    "icon": "ArrowDown",
    "options": [
      {
        "id": "a",
        "text": "sift down"
      },
      {
        "id": "b",
        "text": "sift up"
      },
      {
        "id": "c",
        "text": "swap with mid"
      },
      {
        "id": "d",
        "text": "none"
      }
    ],
    "correctAnswer": "a"
  },
  {
    "id": "int-ds-heap-q5",
    "title": "Level 2: Heaps (Binary Heaps)",
    "type": "true-false",
    "question": "Heap sort uses heap to sort in place.",
    "icon": "SortAscending",
    "correctAnswer": true
  },
  {
    "id": "int-ds-heap-q6",
    "title": "Level 2: Heaps (Binary Heaps)",
    "type": "drag-drop",
    "question": "Match operations:",
    "icon": "ArrowsRightLeft",
    "items": [
      {
        "id": "P",
        "text": "Peek"
      },
      {
        "id": "E",
        "text": "Extract"
      }
    ],
    "correctOrder": [
      "P→O(1)",
      "E→O(log n)"
    ]
  },
  {
    "id": "int-ds-trie-q1",
    "title": "Level 2: Tries (Prefix Trees)",
    "type": "multiple-choice",
    "question": "Each edge in trie represents:",
    "icon": "Text",
    "options": [
      {
        "id": "a",
        "text": "Character"
      },
      {
        "id": "b",
        "text": "String"
      },
      {
        "id": "c",
        "text": "Index"
      },
      {
        "id": "d",
        "text": "Hash"
      }
    ],
    "correctAnswer": "a"
  },
  {
    "id": "int-ds-trie-q2",
    "title": "Level 2: Tries (Prefix Trees)",
    "type": "true-false",
    "question": "Trie uses more space than hash table.",
    "icon": "Layers",
    "correctAnswer": true
  },
  {
    "id": "int-ds-trie-q3",
    "title": "Level 2: Tries (Prefix Trees)",
    "type": "fill-blanks",
    "question": "Search time is O(___).",
    "icon": "Search",
    "codeTemplate": "Search time is O(___).",
    "blanks": [
      ""
    ]
  },
  {
    "id": "int-ds-trie-q4",
    "title": "Level 2: Tries (Prefix Trees)",
    "type": "multiple-choice",
    "question": "Prefix check can be O(m). True or false?",
    "icon": "Check",
    "options": [
      {
        "id": "a",
        "text": "True"
      },
      {
        "id": "b",
        "text": "False"
      }
    ],
    "correctAnswer": "a"
  },
  {
    "id": "int-ds-trie-q5",
    "title": "Level 2: Tries (Prefix Trees)",
    "type": "drag-drop",
    "question": "Match to use-case:",
    "icon": "Layers",
    "items": [
      {
        "id": "I",
        "text": "Insert"
      },
      {
        "id": "S",
        "text": "Search"
      }
    ],
    "correctOrder": [
      "I→Add word",
      "S→Find word"
    ]
  },
  {
    "id": "int-ds-trie-q6",
    "title": "Level 2: Tries (Prefix Trees)",
    "type": "true-false",
    "question": "Tries can auto-complete prefixes.",
    "icon": "Edit3",
    "correctAnswer": true
  },
  {
    "id": "int-ds-uf-q1",
    "title": "Level 2: Disjoint Set Union (Union-Find)",
    "type": "multiple-choice",
    "question": "Path compression flattens the ____ tree.",
    "icon": "Layers",
    "options": [
      {
        "id": "a",
        "text": "parent"
      },
      {
        "id": "b",
        "text": "rank"
      },
      {
        "id": "c",
        "text": "random"
      },
      {
        "id": "d",
        "text": "data"
      }
    ],
    "correctAnswer": "a"
  },
  {
    "id": "int-ds-uf-q2",
    "title": "Level 2: Disjoint Set Union (Union-Find)",
    "type": "true-false",
    "question": "Union by rank attaches smaller tree under larger.",
    "icon": "ArrowDown",
    "correctAnswer": true
  },
  {
    "id": "int-ds-uf-q3",
    "title": "Level 2: Disjoint Set Union (Union-Find)",
    "type": "fill-blanks",
    "question": "Find operation runs in O(___).",
    "icon": "Function",
    "codeTemplate": "Find operation runs in O(___).",
    "blanks": [
      ""
    ]
  },
  {
    "id": "int-ds-uf-q4",
    "title": "Level 2: Disjoint Set Union (Union-Find)",
    "type": "multiple-choice",
    "question": "Union-Find useful for:",
    "icon": "Tree",
    "options": [
      {
        "id": "a",
        "text": "MST"
      },
      {
        "id": "b",
        "text": "Shortest path"
      },
      {
        "id": "c",
        "text": "Sorting"
      },
      {
        "id": "d",
        "text": "Searching"
      }
    ],
    "correctAnswer": "a"
  },
  {
    "id": "int-ds-uf-q5",
    "title": "Level 2: Disjoint Set Union (Union-Find)",
    "type": "true-false",
    "question": "Initialization of n elements is O(n).",
    "icon": "PlusCircle",
    "correctAnswer": true
  },
  {
    "id": "int-ds-uf-q6",
    "title": "Level 2: Disjoint Set Union (Union-Find)",
    "type": "drag-drop",
    "question": "Match operation:",
    "icon": "ArrowsRightLeft",
    "items": [
      {
        "id": "F",
        "text": "Find"
      },
      {
        "id": "U",
        "text": "Union"
      }
    ],
    "correctOrder": [
      "F→Find set rep",
      "U→Merge sets"
    ]
  }
]