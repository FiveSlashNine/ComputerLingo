[
  {
    "id": 1,
    "title": "Level 4: Advanced Data Structures - Trees",
    "type": "multiple-choice",
    "question": "In a balanced AVL tree, what is the maximum allowed difference in height between the left and right subtrees of any node?",
    "options": [
      { "id": "a", "text": "0" },
      { "id": "b", "text": "1" },
      { "id": "c", "text": "2" },
      { "id": "d", "text": "Depends on the number of nodes" }
    ],
    "correctAnswer": "b",
    "icon": "Code2"
  },
  {
    "id": 2,
    "title": "Level 3: Linked List Characteristics",
    "type": "true-false",
    "question": "In a doubly linked list, each node has pointers to both the previous and next nodes.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 3,
    "title": "Level 3: Fill the blank",
    "type": "fill-blanks",
    "question": "The time complexity to search an element in a balanced binary search tree is O(____).",
    "codeTemplate": "O(____)",
    "blanks": ["log n"],
    "icon": "Terminal"
  },
  {
    "id": 4,
    "title": "Level 3: Stack Operations",
    "type": "drag-drop",
    "question": "Arrange the following stack operations in the order they occur in a push operation:",
    "items": [
      { "id": "1", "text": "Increment top pointer" },
      { "id": "2", "text": "Add element at top" },
      { "id": "3", "text": "Check if stack is full" },
      { "id": "4", "text": "Return success" }
    ],
    "correctOrder": ["3", "1", "2", "4"],
    "icon": "ListChecks"
  },
  {
    "id": 5,
    "title": "Level 3: Hash Tables",
    "type": "multiple-choice",
    "question": "What collision resolution method involves placing collided elements in a linked list at the same bucket?",
    "options": [
      { "id": "a", "text": "Open addressing" },
      { "id": "b", "text": "Separate chaining" },
      { "id": "c", "text": "Double hashing" },
      { "id": "d", "text": "Linear probing" }
    ],
    "correctAnswer": "b",
    "icon": "Code2"
  },
  {
    "id": 6,
    "title": "Level 3: True or False",
    "type": "true-false",
    "question": "A queue follows the Last In First Out (LIFO) principle.",
    "correctAnswer": false,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 7,
    "title": "Level 3: Fill the blank",
    "type": "fill-blanks",
    "question": "In a min-heap, the root node is always the ____ value.",
    "codeTemplate": "The root node is the ____ value.",
    "blanks": ["minimum"],
    "icon": "Terminal"
  },
  {
    "id": 8,
    "title": "Level 3: Linked List Insertion",
    "type": "drag-drop",
    "question": "Order the steps to insert a node at the beginning of a singly linked list:",
    "items": [
      { "id": "1", "text": "Set new node's next to current head" },
      { "id": "2", "text": "Make new node the head" },
      { "id": "3", "text": "Allocate memory for new node" },
      { "id": "4", "text": "Assign data to new node" }
    ],
    "correctOrder": ["3", "4", "1", "2"],
    "icon": "ListChecks"
  },
  {
    "id": 9,
    "title": "Level 3: Multiple Choice",
    "type": "multiple-choice",
    "question": "Which data structure uses a 'front' and 'rear' pointer for operations?",
    "options": [
      { "id": "a", "text": "Stack" },
      { "id": "b", "text": "Queue" },
      { "id": "c", "text": "Binary tree" },
      { "id": "d", "text": "Graph" }
    ],
    "correctAnswer": "b",
    "icon": "Code2"
  },
  {
    "id": 10,
    "title": "Level 3: True or False",
    "type": "true-false",
    "question": "In a balanced binary search tree, the height difference between left and right subtrees of any node is at most 1.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 11,
    "title": "Level 3: Fill the blank",
    "type": "fill-blanks",
    "question": "The average case time complexity to access an element in a hash table is O(____).",
    "codeTemplate": "O(____)",
    "blanks": ["1"],
    "icon": "Terminal"
  },
  {
    "id": 12,
    "title": "Level 4: Data Structure Memory Usage Ordering",
    "type": "drag-drop",
    "question": "Reorder the data structures based on their typical memory usage per element, from highest to lowest:",
    "items": [
      { "id": "1", "text": "Array" },
      { "id": "2", "text": "Hash Table (with chaining)" },
      { "id": "3", "text": "Binary Search Tree (balanced)" },
      { "id": "4", "text": "Doubly Linked List" }
    ],
    "correctOrder": ["4", "2", "3", "1"],
    "icon": "ListChecks"
  },
  {
    "id": 13,
    "title": "Level 3: Multiple Choice",
    "type": "multiple-choice",
    "question": "Which traversal method of a binary tree visits nodes in the order: left, root, right?",
    "options": [
      { "id": "a", "text": "Pre-order" },
      { "id": "b", "text": "Post-order" },
      { "id": "c", "text": "In-order" },
      { "id": "d", "text": "Level-order" }
    ],
    "correctAnswer": "c",
    "icon": "Code2"
  },
  {
    "id": 14,
    "title": "Level 3: True or False",
    "type": "true-false",
    "question": "A circular queue requires extra space to differentiate between full and empty states.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 15,
    "title": "Level 3: Fill the blank",
    "type": "fill-blanks",
    "question": "The worst-case time complexity for searching an element in a singly linked list is O(____).",
    "codeTemplate": "O(____)",
    "blanks": ["n"],
    "icon": "Terminal"
  },
  {
    "id": 16,
    "title": "Level 3: Data Structure Ordering",
    "type": "drag-drop",
    "question": "Order these data structures by their average search efficiency from fastest to slowest:",
    "items": [
      { "id": "1", "text": "Hash Table" },
      { "id": "2", "text": "Array (unsorted)" },
      { "id": "3", "text": "Binary Search Tree (balanced)" },
      { "id": "4", "text": "Linked List" }
    ],
    "correctOrder": ["1", "3", "2", "4"],
    "icon": "ListChecks"
  },
  {
    "id": 17,
    "title": "Level 3: Multiple Choice",
    "type": "multiple-choice",
    "question": "Which data structure is ideal for implementing recursion or undo functionality?",
    "options": [
      { "id": "a", "text": "Queue" },
      { "id": "b", "text": "Stack" },
      { "id": "c", "text": "Graph" },
      { "id": "d", "text": "Hash Table" }
    ],
    "correctAnswer": "b",
    "icon": "Code2"
  },
  {
    "id": 18,
    "title": "Level 3: True or False",
    "type": "true-false",
    "question": "In a binary max heap, each parent node is greater than or equal to its children.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 19,
    "title": "Level 3: Fill the blank",
    "type": "fill-blanks",
    "question": "The space complexity of a linked list with n nodes is O(____).",
    "codeTemplate": "O(____)",
    "blanks": ["n"],
    "icon": "Terminal"
  },
  {
    "id": 20,
    "title": "Level 3: Data Structure Reordering",
    "type": "drag-drop",
    "question": "Reorder the data structures based on their typical usage progression from simple to specialized:",
    "items": [
      { "id": "1", "text": "Queue - Task scheduling" },
      { "id": "2", "text": "Stack - Function call management" },
      { "id": "3", "text": "Trie - Efficient prefix search" },
      { "id": "4", "text": "Graph - Network modeling" }
    ],
    "correctOrder": ["1", "2", "3", "4"],
    "icon": "ListChecks"
  }
]
