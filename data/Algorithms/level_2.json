[
  {
    "id": 1,
    "title": "Level 2: Intermediate Algorithm Process",
    "type": "drag-drop",
    "question": "Order the steps of the insertion sort algorithm:",
    "items": [
      { "id": "1", "text": "Compare with elements in sorted part" },
      { "id": "2", "text": "Pick the next element" },
      { "id": "3", "text": "Insert the element at the correct position" },
      { "id": "4", "text": "Shift sorted elements right if larger" }
    ],
    "correctOrder": ["2", "1", "4", "3"],
    "icon": "ListChecks"
  },
  {
    "id": 2,
    "title": "Level 2: Intermediate Pseudocode",
    "type": "fill-blanks",
    "question": "Complete the pseudocode to find the factorial of a number:",
    "codeTemplate": "function factorial(n) {\n  if (n == 0) return 1;\n  else return n ____ factorial(n - 1);\n}",
    "blanks": ["*"],
    "icon": "Terminal"
  },
  {
    "id": 3,
    "title": "Level 2: Intermediate Algorithm Concepts",
    "type": "multiple-choice",
    "question": "Which of the following best describes the purpose of Big-O notation?",
    "options": [
      { "id": "a", "text": "It describes the memory address of an algorithm." },
      { "id": "b", "text": "It measures the average performance in seconds." },
      { "id": "c", "text": "It estimates the time complexity based on input size." },
      { "id": "d", "text": "It counts the number of outputs from an algorithm." }
    ],
    "correctAnswer": "c",
    "icon": "Code2"
  },
  {
    "id": 4,
    "title": "Level 2: Recursive Functions",
    "type": "true-false",
    "question": "A recursive algorithm must have a base case to avoid infinite recursion.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 5,
    "title": "Level 2: Loop Optimization",
    "type": "fill-blanks",
    "question": "Complete the loop to skip even numbers using continue:",
    "codeTemplate": "for (let i = 0; i < 10; i++) {\n  if (i % 2 == 0) ____;\n  console.log(i);\n}",
    "blanks": ["continue"],
    "icon": "Terminal"
  },
  {
    "id": 6,
    "title": "Level 2: Algorithm Comparison",
    "type": "multiple-choice",
    "question": "Which of the following is more efficient for searching in a sorted array?",
    "options": [
      { "id": "a", "text": "Linear Search" },
      { "id": "b", "text": "Bubble Sort" },
      { "id": "c", "text": "Binary Search" },
      { "id": "d", "text": "Selection Sort" }
    ],
    "correctAnswer": "c",
    "icon": "Code2"
  },
  {
    "id": 7,
    "title": "Level 2: Sorting Concepts",
    "type": "true-false",
    "question": "Merge sort is a divide-and-conquer algorithm.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 8,
    "title": "Level 2: Algorithm Analysis",
    "type": "fill-blanks",
    "question": "Complete the time complexity expression: O(____)",
    "codeTemplate": "Binary search average time: O(____)",
    "blanks": ["log n"],
    "icon": "Terminal"
  },
  {
    "id": 9,
    "title": "Level 2: Merge Sort",
    "type": "drag-drop",
    "question": "Order the main steps in merge sort:",
    "items": [
      { "id": "1", "text": "Split the array into halves" },
      { "id": "2", "text": "Recursively sort each half" },
      { "id": "3", "text": "Merge sorted halves" },
      { "id": "4", "text": "Check if the array has more than one element" }
    ],
    "correctOrder": ["4", "1", "2", "3"],
    "icon": "ListChecks"
  },
  {
    "id": 10,
    "title": "Level 2: Loop Efficiency",
    "type": "multiple-choice",
    "question": "Which loop is best when the number of iterations is known?",
    "options": [
      { "id": "a", "text": "while" },
      { "id": "b", "text": "do-while" },
      { "id": "c", "text": "for" },
      { "id": "d", "text": "if-else" }
    ],
    "correctAnswer": "c",
    "icon": "Code2"
  },
  {
    "id": 11,
    "title": "Level 2: Recursion Base Case",
    "type": "fill-blanks",
    "question": "Complete the condition to stop recursion when n equals 0:",
    "codeTemplate": "if (n ____ 0) return 1;",
    "blanks": ["=="],
    "icon": "Terminal"
  },
  {
    "id": 12,
    "title": "Level 2: Searching Algorithm",
    "type": "drag-drop",
    "question": "Order the steps in binary search:",
    "items": [
      { "id": "1", "text": "Define low and high bounds" },
      { "id": "2", "text": "Adjust bounds based on comparison" },
      { "id": "3", "text": "Check middle element" },
      { "id": "4", "text": "Repeat until element found or range is empty" }
    ],
    "correctOrder": ["1", "3", "2", "4"],
    "icon": "ListChecks"
  },
  {
    "id": 13,
    "title": "Level 2: Recursive Thinking",
    "type": "true-false",
    "question": "Every problem that can be solved with recursion can also be solved with iteration.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 14,
    "title": "Level 2: Loop Conversion",
    "type": "fill-blanks",
    "question": "Complete the equivalent while loop for the given for loop.",
    "codeTemplate": "// For loop:\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n\n// While loop:\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i____;\n}",
    "blanks": ["++"],
    "icon": "Terminal"
  },
  {
    "id": 15,
    "title": "Level 2: Loop Control",
    "type": "fill-blanks",
    "question": "Complete the code to break a loop when i equals 5:",
    "codeTemplate": "for (let i = 0; i < 10; i++) {\n  if (i == 5) ____;\n}",
    "blanks": ["break"],
    "icon": "Terminal"
  },
  {
    "id": 16,
    "title": "Level 2: Sorting Performance",
    "type": "true-false",
    "question": "Bubble sort has a better average time complexity than quick sort.",
    "correctAnswer": false,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 17,
    "title": "Level 2: Algorithm Strategy",
    "type": "multiple-choice",
    "question": "What type of strategy does quick sort use?",
    "options": [
      { "id": "a", "text": "Brute force" },
      { "id": "b", "text": "Divide and conquer" },
      { "id": "c", "text": "Backtracking" },
      { "id": "d", "text": "Greedy" }
    ],
    "correctAnswer": "b",
    "icon": "Code2"
  },
  {
    "id": 18,
    "title": "Level 2: Algorithm Design",
    "type": "drag-drop",
    "question": "Arrange steps in greedy algorithm design:",
    "items": [
      { "id": "2", "text": "Check if the choice is safe" },
      { "id": "3", "text": "Make the greedy choice" },
      { "id": "1", "text": "Identify optimal substructure" },
      { "id": "4", "text": "Repeat until solution is complete" }
    ],
    "correctOrder": ["1", "2", "3", "4"],
    "icon": "ListChecks"
  },
  {
    "id": 19,
    "title": "Level 2: Logical Thinking",
    "type": "fill-blanks",
    "question": "Complete the condition to check for odd numbers:",
    "codeTemplate": "if (num % 2 ____ 1) return true;",
    "blanks": ["=="],
    "icon": "Terminal"
  },
  {
    "id": 20,
    "title": "Level 2: Algorithm Properties",
    "type": "true-false",
    "question": "A stable sorting algorithm maintains the relative order of equal elements.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  }
]
