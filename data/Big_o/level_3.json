[
  {
    "id": 1,
    "title": "Level 3: Recursive Complexity",
    "type": "multiple-choice",
    "question": "What is the time complexity of the recursive function: T(n) = 2T(n/2) + n?",
    "options": [
      { "id": "a", "text": "O(n)" },
      { "id": "b", "text": "O(n log n)" },
      { "id": "c", "text": "O(log n)" },
      { "id": "d", "text": "O(n^2)" }
    ],
    "correctAnswer": "b",
    "icon": "Code2"
  },
  {
    "id": 2,
    "title": "Level 3: Big O Myths",
    "type": "true-false",
    "question": "If two algorithms have the same Big O complexity, they always perform the same in practice.",
    "correctAnswer": false,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 3,
    "title": "Level 3: Recursion Tree",
    "type": "fill-blanks",
    "question": "Solving T(n) = T(n/2) + 1 leads to a time complexity of:",
    "codeTemplate": "O(____).",
    "blanks": ["log n"],
    "icon": "Terminal"
  },
  {
    "id": 4,
    "title": "Level 3: Hard Big O Reordering Challenge",
    "type": "drag-drop",
    "question": "Reorder these algorithm complexities from best (lowest) to worst (highest):",
    "items": [
      { "id": "1", "text": "Amortized Push in Stack (Array) - O(1)" },
      { "id": "2", "text": "Floyd-Warshall Algorithm - O(n^3)" },
      { "id": "3", "text": "Linear Search in an Array - O(n)" },
      { "id": "4", "text": "Topological Sort - O(V + E)" },
      { "id": "5", "text": "Counting Sort - O(n + k)" },
      { "id": "6", "text": "Insertion Sort (average) - O(n^2)" },
      { "id": "7", "text": "Binary Heap Extract-Min - O(log n)" }
    ],
    "correctOrder": ["1", "7", "3", "5", "4", "6", "2"],
    "icon": "ListChecks"
  },
  {
    "id": 5,
    "title": "Level 3: Algorithm Analysis",
    "type": "multiple-choice",
    "question": "Which of these complexities represents exponential time?",
    "options": [
      { "id": "a", "text": "O(n!)" },
      { "id": "b", "text": "O(n^2)" },
      { "id": "c", "text": "O(2^n)" },
      { "id": "d", "text": "Both a and c" }
    ],
    "correctAnswer": "d",
    "icon": "Code2"
  },
  {
    "id": 6,
    "title": "Level 3: Growth Speed",
    "type": "true-false",
    "question": "O(n!) grows faster than O(2^n) as n increases.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 7,
    "title": "Level 3: Master Theorem",
    "type": "fill-blanks",
    "question": "Using Master Theorem, T(n) = 4T(n/2) + n has time complexity O(____).",
    "codeTemplate": "a = 4, b = 2, f(n) = n → ____",
    "blanks": ["n^2"],
    "icon": "Terminal"
  },
  {
    "id": 8,
    "title": "Level 3: Complexity Ordering",
    "type": "drag-drop",
    "question": "Order these from best to worst in growth rate:",
    "items": [
      { "id": "1", "text": "O(n log n)" },
      { "id": "2", "text": "O(2^n)" },
      { "id": "3", "text": "O(n^2)" },
      { "id": "4", "text": "O(n!)" }
    ],
    "correctOrder": ["1", "3", "2", "4"],
    "icon": "ListChecks"
  },
  {
    "id": 9,
    "title": "Level 3: Optimization",
    "type": "multiple-choice",
    "question": "Which sorting algorithm is best suited for nearly sorted data?",
    "options": [
      { "id": "a", "text": "Bubble Sort" },
      { "id": "b", "text": "Quick Sort" },
      { "id": "c", "text": "Insertion Sort" },
      { "id": "d", "text": "Merge Sort" }
    ],
    "correctAnswer": "c",
    "icon": "Code2"
  },
  {
    "id": 10,
    "title": "Level 3: Big O Nuance",
    "type": "true-false",
    "question": "An algorithm with O(n log n) complexity may outperform an O(n) algorithm for small input sizes.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 11,
    "title": "Level 3: Advanced Recursion",
    "type": "fill-blanks",
    "question": "T(n) = T(n-1) + n results in a time complexity of:",
    "codeTemplate": "O(____).",
    "blanks": ["n^2"],
    "icon": "Terminal"
  },
  {
    "id": 12,
    "title": "Level 3: Classification",
    "type": "drag-drop",
    "question": "Order these algorithms by their typical-case time complexity from worst (slowest) to best (fastest):",
    "items": [
      { "id": "1", "text": "DFS - O(V + E)" },
      { "id": "2", "text": "Fibonacci (recursive) - O(2^n)" },
      { "id": "3", "text": "Binary Search - O(log n)" },
      { "id": "4", "text": "Dijkstra's Algorithm (with heap) - O(E + V log V)" }
    ],
    "correctOrder": ["2", "4", "1", "3"],
    "icon": "ListChecks"
  },
  {
    "id": 13,
    "title": "Level 3: Logarithmic Growth",
    "type": "multiple-choice",
    "question": "Which problem type typically leads to logarithmic time complexity?",
    "options": [
      { "id": "a", "text": "Linear Search" },
      { "id": "b", "text": "Binary Search" },
      { "id": "c", "text": "Breadth-First Search" },
      { "id": "d", "text": "Merge Sort" }
    ],
    "correctAnswer": "b",
    "icon": "Code2"
  },
  {
    "id": 14,
    "title": "Level 3: Complexity Theory",
    "type": "true-false",
    "question": "O(n^n) grows faster than O(n!).",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 15,
    "title": "Level 3: Hidden Constants",
    "type": "fill-blanks",
    "question": "Big O notation hides ____ and lower order terms.",
    "codeTemplate": "For example: O(3n^2 + 5n) → O(n^2); hidden: ____",
    "blanks": ["constants"],
    "icon": "Terminal"
  },
  {
    "id": 16,
    "title": "Level 3: Memory Complexity",
    "type": "drag-drop",
    "question": "Order these algorithms by their space complexity from lowest to highest:",
    "items": [
      { "id": "1", "text": "DFS (recursive) - O(h)" },
      { "id": "2", "text": "Merge Sort - O(n)" },
      { "id": "3", "text": "In-place Quicksort - O(log n)" },
      { "id": "4", "text": "Bubble Sort - O(1)" }
    ],
    "correctOrder": ["4", "3", "1", "2"],
    "icon": "ListChecks"
  },
  {
    "id": 17,
    "title": "Level 3: Exponential Analysis",
    "type": "multiple-choice",
    "question": "Which problem below likely results in exponential time?",
    "options": [
      { "id": "a", "text": "Graph traversal" },
      { "id": "b", "text": "Knapsack (brute force)" },
      { "id": "c", "text": "Binary search" },
      { "id": "d", "text": "Bubble sort" }
    ],
    "correctAnswer": "b",
    "icon": "Code2"
  },
  {
    "id": 18,
    "title": "Level 3: Growth Patterns",
    "type": "true-false",
    "question": "An algorithm with O(n^3) will always be slower than one with O(n log n).",
    "correctAnswer": false,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 19,
    "title": "Level 3: Algorithm Strategy",
    "type": "fill-blanks",
    "question": "Divide and conquer algorithms often achieve O(____) complexity.",
    "codeTemplate": "Examples: Merge Sort, Quick Sort → ____",
    "blanks": ["n log n"],
    "icon": "Terminal"
  },
  {
    "id": 20,
    "title": "Level 3: Complexity Sorting",
    "type": "drag-drop",
    "question": "Arrange these by increasing time complexity:",
    "items": [
      { "id": "1", "text": "O(log n)" },
      { "id": "2", "text": "O(n^2)" },
      { "id": "3", "text": "O(n log n)" },
      { "id": "4", "text": "O(n!)" }
    ],
    "correctOrder": ["1", "3", "2", "4"],
    "icon": "ListChecks"
  }
]
