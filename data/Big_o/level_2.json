[
  {
    "id": 1,
    "title": "Level 2: Analyzing Loops",
    "type": "multiple-choice",
    "question": "What is the time complexity of a loop that doubles i each time: for (int i = 1; i < n; i *= 2)?",
    "options": [
      { "id": "a", "text": "O(n)" },
      { "id": "b", "text": "O(log n)" },
      { "id": "c", "text": "O(n log n)" },
      { "id": "d", "text": "O(1)" }
    ],
    "correctAnswer": "b",
    "icon": "Code2"
  },
  {
    "id": 2,
    "title": "Level 2: Big O Comparison",
    "type": "true-false",
    "question": "O(n log n) grows faster than O(n^2) as n becomes large.",
    "correctAnswer": false,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 3,
    "title": "Level 2: Loop Nesting",
    "type": "fill-blanks",
    "question": "A loop inside another loop over the same array of size n has complexity O(____).",
    "codeTemplate": "for i in range(n):\n  for j in range(n): ...\n\nO(____)",
    "blanks": ["n^2"],
    "icon": "Terminal"
  },
  {
    "id": 4,
    "title": "Level 3: Big O Analysis",
    "type": "drag-drop",
    "question": "Arrange the steps to analyze the time complexity (Big O) of a function:",
    "items": [
      { "id": "1", "text": "Count operations that depend on input size" },
      { "id": "2", "text": "Examine loops and recursive calls" },
      { "id": "3", "text": "Identify the input size (n)" },
      { "id": "4", "text": "Express the total operations using Big O notation" }
    ],
    "correctOrder": ["3", "2", "1", "4"],
    "icon": "Clock"
  },
  {
    "id": 5,
    "title": "Level 2: Algorithm Efficiency",
    "type": "multiple-choice",
    "question": "Which algorithm has the best average-case time complexity for sorting?",
    "options": [
      { "id": "a", "text": "Bubble Sort" },
      { "id": "b", "text": "Selection Sort" },
      { "id": "c", "text": "Quick Sort" },
      { "id": "d", "text": "Insertion Sort" }
    ],
    "correctAnswer": "c",
    "icon": "Code2"
  },
  {
    "id": 6,
    "title": "Level 2: Growth Patterns",
    "type": "true-false",
    "question": "O(2^n) is faster than O(n!) for large n.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 7,
    "title": "Level 2: Recursive Function",
    "type": "fill-blanks",
    "question": "The time complexity of a recursive Fibonacci function is:",
    "codeTemplate": "function fib(n): \n    return fib(n-1) + fib(n-2)\n\nO(____)",
    "blanks": ["2^n"],
    "icon": "Terminal"
  },
  {
    "id": 8,
    "title": "Level 2: Complexity Classes",
    "type": "drag-drop",
    "question": "Sort from least to greatest time complexity:",
    "items": [
      { "id": "1", "text": "O(n^2)" },
      { "id": "2", "text": "O(log n)" },
      { "id": "3", "text": "O(n log n)" },
      { "id": "4", "text": "O(n)" }
    ],
    "correctOrder": ["2", "4", "3", "1"],
    "icon": "ListChecks"
  },
  {
    "id": 9,
    "title": "Level 2: Memory Usage",
    "type": "multiple-choice",
    "question": "Which has the highest space complexity?",
    "options": [
      { "id": "a", "text": "Linear search" },
      { "id": "b", "text": "Merge sort" },
      { "id": "c", "text": "Selection sort" },
      { "id": "d", "text": "Bubble sort" }
    ],
    "correctAnswer": "b",
    "icon": "Code2"
  },
  {
    "id": 10,
    "title": "Level 2: Complexity Concepts",
    "type": "true-false",
    "question": "The best-case scenario always determines an algorithm’s complexity class.",
    "correctAnswer": false,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 11,
    "title": "Level 2: Logarithmic Loop",
    "type": "fill-blanks",
    "question": "A binary search algorithm runs in: ",
    "codeTemplate": "function binarySearch(arr, target) { ... }\n\nO(____) time.",
    "blanks": ["log n"],
    "icon": "Terminal"
  },
  {
    "id": 12,
    "title": "Level 2: Big O Scenario Reasoning",
    "type": "drag-drop",
    "question": "Order these algorithm scenarios by increasing time complexity (from most efficient to least efficient):",
    "items": [
      { "id": "1", "text": "Solving a recursive problem where the solution tree doubles at each level" },
      { "id": "2", "text": "Looping through an array once to find the maximum value" },
      { "id": "3", "text": "Binary search on a sorted array" },
      { "id": "4", "text": "Sorting an array using merge sort" },
      { "id": "5", "text": "Checking all pairs in a list (nested loop)" },
      { "id": "6", "text": "Accessing an element in a hash table by key" }
    ],
    "correctOrder": ["6", "3", "2", "4", "5", "1"],
    "icon": "ChartTrend"
  },
  {
    "id": 13,
    "title": "Level 2: Algorithm Design",
    "type": "multiple-choice",
    "question": "Which scenario best fits O(n log n)?",
    "options": [
      { "id": "a", "text": "Linear search" },
      { "id": "b", "text": "Quick sort" },
      { "id": "c", "text": "Bubble sort" },
      { "id": "d", "text": "Access by index" }
    ],
    "correctAnswer": "b",
    "icon": "Code2"
  },
  {
    "id": 14,
    "title": "Level 2: Worst Case",
    "type": "true-false",
    "question": "Big O usually refers to worst-case complexity.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 15,
    "title": "Level 2: Performance Profile",
    "type": "fill-blanks",
    "question": "O(n^3) means performance degrades very ____ as input increases.",
    "codeTemplate": "Input size ↑ → Time ↑↑↑ = ____",
    "blanks": ["quickly"],
    "icon": "Terminal"
  },
  {
    "id": 16,
    "title": "Level 2: Big O Scenario Ordering",
    "type": "drag-drop",
    "question": "Order these algorithm scenarios by increasing time complexity (from most efficient to least efficient):",
    "items": [
      { "id": "1", "text": "Inserting an element at the end of a dynamic array" },
      { "id": "2", "text": "Depth-first traversal of a binary tree" },
      { "id": "3", "text": "Linear search for an element in an unsorted list" },
      { "id": "4", "text": "Quick sort on an average unsorted array" },
      { "id": "5", "text": "Generating all subsets of a set (power set)" },
      { "id": "6", "text": "Accessing a value in a balanced binary search tree" }
    ],
    "correctOrder": ["1", "6", "2", "3", "4", "5"],
    "icon": "ChartTrend"
  },
  {
    "id": 17,
    "title": "Level 2: Best vs Worst Case",
    "type": "multiple-choice",
    "question": "Which has a better best-case than worst-case complexity?",
    "options": [
      { "id": "a", "text": "Binary Search" },
      { "id": "b", "text": "Bubble Sort" },
      { "id": "c", "text": "Linear Search" },
      { "id": "d", "text": "All of the above" }
    ],
    "correctAnswer": "d",
    "icon": "Code2"
  },
  {
    "id": 18,
    "title": "Level 2: Asymptotic Behavior",
    "type": "true-false",
    "question": "Big O analysis focuses on behavior as input size approaches infinity.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 19,
    "title": "Level 2: Dominant Terms",
    "type": "fill-blanks",
    "question": "In O(n^2 + n), the dominant term is:",
    "codeTemplate": "____",
    "blanks": ["n^2"],
    "icon": "Terminal"
  },
  {
    "id": 20,
    "title": "Level 2: Advanced Big O Examples",
    "type": "drag-drop",
    "question": "Reorder these algorithms and operations by their Big O complexity from best (fastest) to worst (slowest):",
    "items": [
      { "id": "1", "text": "Binary Search - O(log n)" },
      { "id": "2", "text": "Insertion Sort (average) - O(n^2)" },
      { "id": "3", "text": "Hash Table Lookup - O(1)" },
      { "id": "4", "text": "Merge Sort - O(n log n)" },
      { "id": "5", "text": "Breadth-First Search (BFS) - O(V + E)" },
      { "id": "6", "text": "Bubble Sort - O(n^2)" },
      { "id": "7", "text": "Building a Heap - O(n)" }
    ],
    "correctOrder": ["3", "1", "7", "5", "4", "2", "6"],
    "icon": "ListChecks"
  }
]
