[
  {
    "id": 1,
    "title": "Level 1: Big O Basics",
    "type": "multiple-choice",
    "question": "What does Big O notation describe?",
    "options": [
      { "id": "a", "text": "The output of an algorithm" },
      { "id": "b", "text": "The efficiency of an algorithm" },
      { "id": "c", "text": "The code quality" },
      { "id": "d", "text": "The programming language" }
    ],
    "correctAnswer": "b",
    "icon": "Code2"
  },
  {
    "id": 2,
    "title": "Level 1: Big O Concepts",
    "type": "true-false",
    "question": "O(1) means the algorithm takes the same time regardless of input size.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 3,
    "title": "Level 1: Time Complexity",
    "type": "fill-blanks",
    "question": "for (int i = 0; i < n; i++) { ... }",
    "codeTemplate": "Big O of a loop that runs n times is O(____)",
    "blanks": ["n"],
    "icon": "Terminal"
  },
  {
    "id": 4,
    "title": "Level 1: Big O Examples",
    "type": "drag-drop",
    "question": "Reorder the algorithm, Big O complexity pairs from best to worst:",
    "items": [
      { "id": "1", "text": "Linear Search - O(n)" },
      { "id": "2", "text": "Binary Search - O(log n)" },
      { "id": "3", "text": "Bubble Sort - O(n^2)" },
      { "id": "4", "text": "Hash Lookup - O(1)" }
    ],
    "correctOrder": ["4", "2", "1", "3"],
    "icon": "ListChecks"
  },
  {
    "id": 5,
    "title": "Level 1: Constant Time",
    "type": "multiple-choice",
    "question": "Which of the following is O(1)?",
    "options": [
      { "id": "a", "text": "Accessing an array element by index" },
      { "id": "b", "text": "Looping through an array" },
      { "id": "c", "text": "Binary Search" },
      { "id": "d", "text": "Bubble Sort" }
    ],
    "correctAnswer": "a",
    "icon": "Code2"
  },
  {
    "id": 6,
    "title": "Level 1: Time Complexity",
    "type": "true-false",
    "question": "O(n^2) is faster than O(n) for large n.",
    "correctAnswer": false,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 7,
    "title": "Level 1: Time Complexity",
    "type": "fill-blanks",
    "question": "An algorithm that divides the input in half each step is O(____)",
    "codeTemplate": "function search(arr) {\n  mid = arr.length / 2; \n... \n}\n\n O(____)",
    "blanks": ["log n"],
    "icon": "Terminal"
  },
  {
    "id": 8,
    "title": "Level 1: Algorithm Speed",
    "type": "drag-drop",
    "question": "Order these complexities from fastest to slowest:",
    "items": [
      { "id": "1", "text": "O(n^2)" },
      { "id": "2", "text": "O(1)" },
      { "id": "3", "text": "O(log n)" },
      { "id": "4", "text": "O(n)" }
    ],
    "correctOrder": ["2", "3", "4", "1"],
    "icon": "ListChecks"
  },
  {
    "id": 9,
    "title": "Level 1: Space Complexity",
    "type": "multiple-choice",
    "question": "What does space complexity measure?",
    "options": [
      { "id": "a", "text": "Number of inputs" },
      { "id": "b", "text": "Memory used by the algorithm" },
      { "id": "c", "text": "Execution speed" },
      { "id": "d", "text": "Compiler size" }
    ],
    "correctAnswer": "b",
    "icon": "Code2"
  },
  {
    "id": 10,
    "title": "Level 1: Big O Growth",
    "type": "true-false",
    "question": "O(n!) grows faster than O(2^n).",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 11,
    "title": "Level 1: Time Complexity",
    "type": "fill-blanks",
    "question": "Nested loops often have time complexity O(____)",
    "codeTemplate": "for i in range(n):\n  for j in range(n): ...\n\nO(____)",
    "blanks": ["n^2"],
    "icon": "Terminal"
  },
  {
    "id": 12,
    "title": "Level 1: Common Complexities",
    "type": "drag-drop",
    "question": "Order these complexities from fastest to slowest:",
    "items": [
      { "id": "1", "text": "O(n^2) - Nested loops" },
      { "id": "2", "text": "O(log n) - Binary search" },
      { "id": "3", "text": "O(n) - Linear search" },
      { "id": "4", "text": "O(1) - Access by index" }
    ],
    "correctOrder": ["4", "2", "3", "1"],
    "icon": "ListChecks"
  },
  {
    "id": 13,
    "title": "Level 1: Growth Order",
    "type": "multiple-choice",
    "question": "Which is the slowest growing complexity?",
    "options": [
      { "id": "a", "text": "O(n)" },
      { "id": "b", "text": "O(n^2)" },
      { "id": "c", "text": "O(log n)" },
      { "id": "d", "text": "O(1)" }
    ],
    "correctAnswer": "d",
    "icon": "Code2"
  },
  {
    "id": 14,
    "title": "Level 1: Big O Properties",
    "type": "true-false",
    "question": "Big O ignores constants and low-order terms.",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 15,
    "title": "Level 1: Array Traversal",
    "type": "fill-blanks",
    "question": "What is the time complexity of traversing an array of size n once?",
    "codeTemplate": "for i in array:\n  print(i)\n\nO(____)",
    "blanks": ["n"],
    "icon": "Terminal"
  },
  {
    "id": 16,
    "title": "Level 1: Complexity Sort",
    "type": "drag-drop",
    "question": "Sort from best to worst in Big O efficiency:",
    "items": [
      { "id": "1", "text": "O(n log n)" },
      { "id": "2", "text": "O(n)" },
      { "id": "3", "text": "O(log n)" },
      { "id": "4", "text": "O(n^2)" }
    ],
    "correctOrder": ["3", "2", "1", "4"],
    "icon": "ListChecks"
  },
  {
    "id": 17,
    "title": "Level 1: Time Complexity",
    "type": "multiple-choice",
    "question": "Which loop structure has O(n^2) complexity?",
    "options": [
      { "id": "a", "text": "Single loop" },
      { "id": "b", "text": "Double nested loop" },
      { "id": "c", "text": "Logarithmic loop" },
      { "id": "d", "text": "No loop" }
    ],
    "correctAnswer": "b",
    "icon": "Code2"
  },
  {
    "id": 18,
    "title": "Level 1: Constant Time",
    "type": "true-false",
    "question": "Accessing the first item in a list is O(1).",
    "correctAnswer": true,
    "icon": "SlidersHorizontal"
  },
  {
    "id": 19,
    "title": "Level 1: Linear Complexity",
    "type": "fill-blanks",
    "question": "O(n) means the time increases ____ with input size.",
    "codeTemplate": "Answer: ____",
    "blanks": ["linearly"],
    "icon": "Terminal"
  },
  {
    "id": 20,
    "title": "Level 1: Performance",
    "type": "drag-drop",
    "question": "Arrange Big O from largest to samllests growth:",
    "items": [
      { "id": "1", "text": "O(log n)" },
      { "id": "2", "text": "O(1)" },
      { "id": "3", "text": "O(n)" },
      { "id": "4", "text": "O(n^2)" }
    ],
    "correctOrder": ["4", "3", "1", "2"],
    "icon": "ListChecks"
  }
]
